using System;
using System.Data.SQLite;
using System.IO;

namespace TeslaRentalPlatform
{
    class Program
    {
        private static string databasePath = "tesla_rental.db";

        static void Main(string[] args)
        {
            if (!File.Exists(databasePath))
            {
                SQLiteConnection.CreateFile(databasePath);
                InitializeDatabase();
            }

            Console.WriteLine("Welcome to the Tesla Rental Platform!");
        }

        static void InitializeDatabase()
        {
            using (var connection = new SQLiteConnection($"Data Source={databasePath};Version=3;"))
            {
                connection.Open();

                string createCarsTable = @"CREATE TABLE Cars (ID INTEGER PRIMARY KEY, Model TEXT NOT NULL, HourlyRate REAL NOT NULL, KmRate REAL NOT NULL);";
                ExecuteCommand(createCarsTable, connection);

                string createClientsTable = @"CREATE TABLE Clients (ID INTEGER PRIMARY KEY, Name TEXT NOT NULL, Email TEXT NOT NULL);";
                ExecuteCommand(createClientsTable, connection);

                string createRentalsTable = @"CREATE TABLE Rentals (ID INTEGER PRIMARY KEY, ClientID INTEGER NOT NULL, CarID INTEGER NOT NULL, StartTime TEXT NOT NULL, EndTime TEXT, DistanceKm REAL, TotalCost REAL, FOREIGN KEY(ClientID) REFERENCES Clients(ID), FOREIGN KEY(CarID) REFERENCES Cars(ID));";
                ExecuteCommand(createRentalsTable, connection);

                Console.WriteLine("Database initialized successfully.");
            }
        }

        static void ExecuteCommand(string command, SQLiteConnection connection)
        {
            using (var sqlCommand = new SQLiteCommand(command, connection))
            {
                sqlCommand.ExecuteNonQuery();
            }
        }

        static void RegisterClient(string name, string email)
        {
            using (var connection = new SQLiteConnection($"Data Source={databasePath};Version=3;"))
            {
                connection.Open();

                string command = "INSERT INTO Clients (Name, Email) VALUES (@Name, @Email);";
                using (var sqlCommand = new SQLiteCommand(command, connection))
                {
                    sqlCommand.Parameters.AddWithValue("@Name", name);
                    sqlCommand.Parameters.AddWithValue("@Email", email);
                    sqlCommand.ExecuteNonQuery();
                }

                Console.WriteLine("Client registered successfully.");
            }
        }

        static void AddCar(string model, double hourlyRate, double kmRate)
        {
            using (var connection = new SQLiteConnection($"Data Source={databasePath};Version=3;"))
            {
                connection.Open();

                string command = "INSERT INTO Cars (Model, HourlyRate, KmRate) VALUES (@Model, @HourlyRate, @KmRate);";
                using (var sqlCommand = new SQLiteCommand(command, connection))
                {
                    sqlCommand.Parameters.AddWithValue("@Model", model);
                    sqlCommand.Parameters.AddWithValue("@HourlyRate", hourlyRate);
                    sqlCommand.Parameters.AddWithValue("@KmRate", kmRate);
                    sqlCommand.ExecuteNonQuery();
                }

                Console.WriteLine("Car added successfully.");
            }
        }

        static void RentCar(int clientId, int carId, DateTime startTime)
        {
            using (var connection = new SQLiteConnection($"Data Source={databasePath};Version=3;"))
            {
                connection.Open();

                string command = "INSERT INTO Rentals (ClientID, CarID, StartTime) VALUES (@ClientID, @CarID, @StartTime);";
                using (var sqlCommand = new SQLiteCommand(command, connection))
                {
                    sqlCommand.Parameters.AddWithValue("@ClientID", clientId);
                    sqlCommand.Parameters.AddWithValue("@CarID", carId);
                    sqlCommand.Parameters.AddWithValue("@StartTime", startTime.ToString("yyyy-MM-dd HH:mm:ss"));
                    sqlCommand.ExecuteNonQuery();
                }

                Console.WriteLine("Car rented successfully.");
            }
        }

        static void CompleteRental(int rentalId, DateTime endTime, double distanceKm)
        {
            using (var connection = new SQLiteConnection($"Data Source={databasePath};Version=3;"))
            {
                connection.Open();

                string fetchData = "SELECT StartTime, CarID FROM Rentals WHERE ID = @RentalID;";
                double hourlyRate = 0, kmRate = 0;
                DateTime startTime = DateTime.Now;
                using (var sqlCommand = new SQLiteCommand(fetchData, connection))
                {
                    sqlCommand.Parameters.AddWithValue("@RentalID", rentalId);
                    using (var reader = sqlCommand.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            startTime = DateTime.Parse(reader["StartTime"].ToString());
                            int carId = Convert.ToInt32(reader["CarID"]);

                            string carData = "SELECT HourlyRate, KmRate FROM Cars WHERE ID = @CarID;";
                            using (var carCommand = new SQLiteCommand(carData, connection))
                            {
                                carCommand.Parameters.AddWithValue("@CarID", carId);
                                using (var carReader = carCommand.ExecuteReader())
                                {
                                    if (carReader.Read())
                                    {
                                        hourlyRate = Convert.ToDouble(carReader["HourlyRate"]);
                                        kmRate = Convert.ToDouble(carReader["KmRate"]);
                                    }
                                }
                            }
                        }
                        else
                        {
                            Console.WriteLine("Rental not found.");
                            return;
                        }
                    }
                }

                double hours = (endTime - startTime).TotalHours;
                double totalCost = (hours * hourlyRate) + (distanceKm * kmRate);

                string updateRental = "UPDATE Rentals SET EndTime = @EndTime, DistanceKm = @DistanceKm, TotalCost = @TotalCost WHERE ID = @RentalID;";
                using (var updateCommand = new SQLiteCommand(updateRental, connection))
                {
                    updateCommand.Parameters.AddWithValue("@EndTime", endTime.ToString("yyyy-MM-dd HH:mm:ss"));
                    updateCommand.Parameters.AddWithValue("@DistanceKm", distanceKm);
                    updateCommand.Parameters.AddWithValue("@TotalCost", totalCost);
                    updateCommand.Parameters.AddWithValue("@RentalID", rentalId);
                    updateCommand.ExecuteNonQuery();
                }

                Console.WriteLine($"Rental completed. Total cost: {totalCost:F2} EUR.");
            }
        }
    }
}

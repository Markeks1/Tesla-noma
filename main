using System;
using System.Data.SQLite;
using System.IO;

namespace TeslaNomaPlatforma
{
    class Programma
    {
        private static string datuBazesCels = "tesla_noma.db";

        static void Main(string[] args)
        {
            if (!File.Exists(datuBazesCels))
            {
                SQLiteConnection.CreateFile(datuBazesCels);
                InicializetDatuBazi();
            }

            Console.WriteLine("Laipni lūdzam Tesla Nomas Platformā!");
        }

        static void InicializetDatuBazi()
        {
            using (var savienojums = new SQLiteConnection($"Data Source={datuBazesCels};Version=3;"))
            {
                savienojums.Open();

                string izveidotAutoTabulu = @"CREATE TABLE Automasinas (ID INTEGER PRIMARY KEY, Modelis TEXT NOT NULL, StundasLikme REAL NOT NULL, KmLikme REAL NOT NULL);";
                IzpilditKomandu(izveidotAutoTabulu, savienojums);

                string izveidotKlientuTabulu = @"CREATE TABLE Klienti (ID INTEGER PRIMARY KEY, Vards TEXT NOT NULL, Epasts TEXT NOT NULL);";
                IzpilditKomandu(izveidotKlientuTabulu, savienojums);

                string izveidotNomuTabulu = @"CREATE TABLE Nomas (ID INTEGER PRIMARY KEY, KlientaID INTEGER NOT NULL, AutomasinasID INTEGER NOT NULL, SakasLaiks TEXT NOT NULL, BeiguLaiks TEXT, NobrauktieKm REAL, KopMaksa REAL, FOREIGN KEY(KlientaID) REFERENCES Klienti(ID), FOREIGN KEY(AutomasinasID) REFERENCES Automasinas(ID));";
                IzpilditKomandu(izveidotNomuTabulu, savienojums);

                Console.WriteLine("Datu bāze veiksmīgi inicializēta.");
            }
        }

        static void IzpilditKomandu(string komanda, SQLiteConnection savienojums)
        {
            using (var sqlKomanda = new SQLiteCommand(komanda, savienojums))
            {
                sqlKomanda.ExecuteNonQuery();
            }
        }

        static void RegistretKlientu(string vards, string epasts)
        {
            using (var savienojums = new SQLiteConnection($"Data Source={datuBazesCels};Version=3;"))
            {
                savienojums.Open();

                string komanda = "INSERT INTO Klienti (Vards, Epasts) VALUES (@Vards, @Epasts);";
                using (var sqlKomanda = new SQLiteCommand(komanda, savienojums))
                {
                    sqlKomanda.Parameters.AddWithValue("@Vards", vards);
                    sqlKomanda.Parameters.AddWithValue("@Epasts", epasts);
                    sqlKomanda.ExecuteNonQuery();
                }

                Console.WriteLine("Klients veiksmīgi reģistrēts.");
            }
        }

        static void PievienotAutomasinu(string modelis, double stundasLikme, double kmLikme)
        {
            using (var savienojums = new SQLiteConnection($"Data Source={datuBazesCels};Version=3;"))
            {
                savienojums.Open();

                string komanda = "INSERT INTO Automasinas (Modelis, StundasLikme, KmLikme) VALUES (@Modelis, @StundasLikme, @KmLikme);";
                using (var sqlKomanda = new SQLiteCommand(komanda, savienojums))
                {
                    sqlKomanda.Parameters.AddWithValue("@Modelis", modelis);
                    sqlKomanda.Parameters.AddWithValue("@StundasLikme", stundasLikme);
                    sqlKomanda.Parameters.AddWithValue("@KmLikme", kmLikme);
                    sqlKomanda.ExecuteNonQuery();
                }

                Console.WriteLine("Automašīna veiksmīgi pievienota.");
            }
        }

        static void NomatAutomasinu(int klientaId, int automasinasId, DateTime sakasLaiks)
        {
            using (var savienojums = new SQLiteConnection($"Data Source={datuBazesCels};Version=3;"))
            {
                savienojums.Open();

                string komanda = "INSERT INTO Nomas (KlientaID, AutomasinasID, SakasLaiks) VALUES (@KlientaID, @AutomasinasID, @SakasLaiks);";
                using (var sqlKomanda = new SQLiteCommand(komanda, savienojums))
                {
                    sqlKomanda.Parameters.AddWithValue("@KlientaID", klientaId);
                    sqlKomanda.Parameters.AddWithValue("@AutomasinasID", automasinasId);
                    sqlKomanda.Parameters.AddWithValue("@SakasLaiks", sakasLaiks.ToString("yyyy-MM-dd HH:mm:ss"));
                    sqlKomanda.ExecuteNonQuery();
                }

                Console.WriteLine("Automašīna veiksmīgi iznomāta.");
            }
        }

        static void PabeigtNomu(int nomasId, DateTime beiguLaiks, double nobrauktieKm)
        {
            using (var savienojums = new SQLiteConnection($"Data Source={datuBazesCels};Version=3;"))
            {
                savienojums.Open();

                string iegutDatus = "SELECT SakasLaiks, AutomasinasID FROM Nomas WHERE ID = @NomasID;";
                double stundasLikme = 0, kmLikme = 0;
                DateTime sakasLaiks = DateTime.Now;
                using (var sqlKomanda = new SQLiteCommand(iegutDatus, savienojums))
                {
                    sqlKomanda.Parameters.AddWithValue("@NomasID", nomasId);
                    using (var lasitajs = sqlKomanda.ExecuteReader())
                    {
                        if (lasitajs.Read())
                        {
                            sakasLaiks = DateTime.Parse(lasitajs["SakasLaiks"].ToString());
                            int automasinasId = Convert.ToInt32(lasitajs["AutomasinasID"]);

                            string automasinasDati = "SELECT StundasLikme, KmLikme FROM Automasinas WHERE ID = @AutomasinasID;";
                            using (var automasinasKomanda = new SQLiteCommand(automasinasDati, savienojums))
                            {
                                automasinasKomanda.Parameters.AddWithValue("@AutomasinasID", automasinasId);
                                using (var automasinasLasitajs = automasinasKomanda.ExecuteReader())
                                {
                                    if (automasinasLasitajs.Read())
                                    {
                                        stundasLikme = Convert.ToDouble(automasinasLasitajs["StundasLikme"]);
                                        kmLikme = Convert.ToDouble(automasinasLasitajs["KmLikme"]);
                                    }
                                }
                            }
                        }
                        else
                        {
                            Console.WriteLine("Noma nav atrasta.");
                            return;
                        }
                    }
                }

                double stundas = (beiguLaiks - sakasLaiks).TotalHours;
                double kopMaksa = (stundas * stundasLikme) + (nobrauktieKm * kmLikme);

                string atjaunotNomu = "UPDATE Nomas SET BeiguLaiks = @BeiguLaiks, NobrauktieKm = @NobrauktieKm, KopMaksa = @KopMaksa WHERE ID = @NomasID;";
                using (var atjaunotKomanda = new SQLiteCommand(atjaunotNomu, savienojums))
                {
                    atjaunotKomanda.Parameters.AddWithValue("@BeiguLaiks", beiguLaiks.ToString("yyyy-MM-dd HH:mm:ss"));
                    atjaunotKomanda.Parameters.AddWithValue("@NobrauktieKm", nobrauktieKm);
                    atjaunotKomanda.Parameters.AddWithValue("@KopMaksa", kopMaksa);
                    atjaunotKomanda.Parameters.AddWithValue("@NomasID", nomasId);
                    atjaunotKomanda.ExecuteNonQuery();
                }

                Console.WriteLine($"Noma pabeigta. Kopējā maksa: {kopMaksa:F2} EUR.");
            }
        }
    }
}
